{"version":3,"file":"15-Cdb0lK_e.js","sources":["../../../.svelte-kit/adapter-node/entries/pages/dashboard/ponds/_pondId_/_page.server.ts.js","../../../.svelte-kit/adapter-node/nodes/15.js"],"sourcesContent":["import { r as requireRole } from \"../../../../../chunks/auth.js\";\nimport { e as error, f as fail } from \"../../../../../chunks/index2.js\";\nimport { d as db } from \"../../../../../chunks/database.js\";\nimport { l as logActivity } from \"../../../../../chunks/activityLogger.js\";\nconst load = async (event) => {\n  await requireRole(event, [\"admin\"]);\n  const pondId = event.params.pondId;\n  event.depends(`app:production_reports:${pondId}`);\n  if (!pondId || isNaN(Number(pondId))) {\n    throw error(404, \"Pond not found: Invalid Pond ID.\");\n  }\n  const url = new URL(event.request.url);\n  const search = url.searchParams.get(\"search\") || \"\";\n  const sortBy = url.searchParams.get(\"sort\") || \"report_date\";\n  const sortOrder = url.searchParams.get(\"order\") || \"desc\";\n  let reports;\n  let pondDetails;\n  try {\n    pondDetails = db.prepare(\n      \"SELECT id, pond_number, location, status FROM ponds WHERE id = ?\"\n    ).get(pondId);\n    if (!pondDetails) {\n      throw error(404, \"Pond not found.\");\n    }\n    let reportsQuery = `\n      SELECT\n        id,\n        pond_id,\n        species_name,\n        report_date,\n        total_harvest_weight_kg,\n        total_harvest_count,\n        average_fish_weight_g,\n        mortality_count,\n        feed_consumed_kg,\n        notes,\n        created_at,\n        updated_at\n      FROM production_reports\n      WHERE pond_id = ?\n    `;\n    const queryParams = [pondId];\n    const searchConditions = [];\n    if (search) {\n      searchConditions.push(`species_name LIKE ?`);\n      queryParams.push(`%${search}%`);\n      searchConditions.push(`notes LIKE ?`);\n      queryParams.push(`%${search}%`);\n    }\n    if (searchConditions.length > 0) {\n      reportsQuery += ` AND (${searchConditions.join(\" OR \")})`;\n    }\n    const allowedSortColumns = [\n      \"report_date\",\n      \"species_name\",\n      \"total_harvest_weight_kg\",\n      \"total_harvest_count\",\n      \"mortality_count\",\n      \"feed_consumed_kg\",\n      \"created_at\",\n      \"updated_at\"\n    ];\n    const finalSortBy = allowedSortColumns.includes(sortBy) ? sortBy : \"report_date\";\n    const finalSortOrder = sortOrder.toLowerCase() === \"asc\" ? \"ASC\" : \"DESC\";\n    reportsQuery += ` ORDER BY ${finalSortBy} ${finalSortOrder}`;\n    reports = db.prepare(reportsQuery).all(...queryParams);\n  } catch (error$1) {\n    console.error(\"Error fetching production reports or pond details:\", error$1);\n    if (error$1 instanceof Error && error$1.message.includes(\"not found\")) {\n      throw error(404, \"Pond or reports not found.\");\n    }\n    reports = [];\n    pondDetails = void 0;\n  }\n  return {\n    pond: pondDetails,\n    // Pass pond details\n    reports: reports.map((report) => ({\n      ...report,\n      report_date: report.report_date ? new Date(report.report_date).toISOString().split(\"T\")[0] : null,\n      created_at: report.created_at ? new Date(report.created_at).toISOString().split(\"T\")[0] : null,\n      updated_at: report.updated_at ? new Date(report.updated_at).toISOString().split(\"T\")[0] : null\n    })),\n    search,\n    sortBy,\n    // Return original sortBy for client-side logic\n    sortOrder: sortOrder.toLowerCase()\n  };\n};\nconst actions = {\n  create: async ({ request, params, locals }) => {\n    const pondId = params.pondId;\n    if (!pondId || isNaN(Number(pondId))) {\n      return fail(400, { error: \"Invalid Pond ID for report creation.\" });\n    }\n    const data = await request.formData();\n    const species_name = data.get(\"species_name\")?.toString();\n    const report_date = data.get(\"report_date\")?.toString();\n    const total_harvest_weight_kg = data.get(\"total_harvest_weight_kg\")?.toString();\n    const total_harvest_count = data.get(\"total_harvest_count\")?.toString();\n    const average_fish_weight_g = data.get(\"average_fish_weight_g\")?.toString();\n    const mortality_count = data.get(\"mortality_count\")?.toString();\n    const feed_consumed_kg = data.get(\"feed_consumed_kg\")?.toString();\n    const notes = data.get(\"notes\")?.toString();\n    if (!species_name || !report_date) {\n      return fail(400, {\n        error: \"Species Name and Report Date are required.\"\n      });\n    }\n    try {\n      const transaction = db.transaction(() => {\n        const result = db.prepare(\n          `\n          INSERT INTO production_reports (\n            pond_id, species_name, report_date, total_harvest_weight_kg,\n            total_harvest_count, average_fish_weight_g, mortality_count,\n            feed_consumed_kg, notes\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n        `\n        ).run(\n          Number(pondId),\n          species_name,\n          report_date,\n          total_harvest_weight_kg ? parseFloat(total_harvest_weight_kg) : null,\n          total_harvest_count ? parseInt(total_harvest_count) : null,\n          average_fish_weight_g ? parseFloat(average_fish_weight_g) : null,\n          mortality_count ? parseInt(mortality_count) : 0,\n          feed_consumed_kg ? parseFloat(feed_consumed_kg) : null,\n          notes || null\n        );\n        const reportId = Number(result.lastInsertRowid);\n        const userId = locals.user?.id || null;\n        logActivity(\n          \"created\",\n          \"production_report\",\n          reportId,\n          `Created production report for pond ID ${pondId} - Species: ${species_name}, Date: ${report_date}`,\n          userId\n        );\n        return { success: true };\n      });\n      return transaction();\n    } catch (error2) {\n      console.error(\"Error creating production report:\", error2);\n      return fail(500, { error: \"Failed to create production report.\" });\n    }\n  },\n  update: async ({ request, params, locals }) => {\n    const pondId = params.pondId;\n    if (!pondId || isNaN(Number(pondId))) {\n      return fail(400, { error: \"Invalid Pond ID for report update.\" });\n    }\n    const data = await request.formData();\n    const id = data.get(\"id\")?.toString();\n    const species_name = data.get(\"species_name\")?.toString();\n    const report_date = data.get(\"report_date\")?.toString();\n    const total_harvest_weight_kg = data.get(\"total_harvest_weight_kg\")?.toString();\n    const total_harvest_count = data.get(\"total_harvest_count\")?.toString();\n    const average_fish_weight_g = data.get(\"average_fish_weight_g\")?.toString();\n    const mortality_count = data.get(\"mortality_count\")?.toString();\n    const feed_consumed_kg = data.get(\"feed_consumed_kg\")?.toString();\n    const notes = data.get(\"notes\")?.toString();\n    if (!id || !species_name || !report_date) {\n      return fail(400, {\n        error: \"ID, Species Name, and Report Date are required for update.\"\n      });\n    }\n    try {\n      const transaction = db.transaction(() => {\n        db.prepare(\n          `\n          UPDATE production_reports\n          SET species_name = ?, report_date = ?, total_harvest_weight_kg = ?,\n              total_harvest_count = ?, average_fish_weight_g = ?, mortality_count = ?,\n              feed_consumed_kg = ?, notes = ?, updated_at = CURRENT_TIMESTAMP\n          WHERE id = ? AND pond_id = ?\n        `\n        ).run(\n          species_name,\n          report_date,\n          total_harvest_weight_kg ? parseFloat(total_harvest_weight_kg) : null,\n          total_harvest_count ? parseInt(total_harvest_count) : null,\n          average_fish_weight_g ? parseFloat(average_fish_weight_g) : null,\n          mortality_count ? parseInt(mortality_count) : 0,\n          feed_consumed_kg ? parseFloat(feed_consumed_kg) : null,\n          notes || null,\n          id,\n          Number(pondId)\n        );\n        const userId = locals.user?.id || null;\n        logActivity(\n          \"updated\",\n          \"production_report\",\n          Number(id),\n          `Updated production report ID ${id} for pond ID ${pondId} - Species: ${species_name}`,\n          userId\n        );\n        return { success: true };\n      });\n      return transaction();\n    } catch (error2) {\n      console.error(\"Error updating production report:\", error2);\n      return fail(500, { error: \"Failed to update production report.\" });\n    }\n  },\n  delete: async ({ request, params, locals }) => {\n    const pondId = params.pondId;\n    if (!pondId || isNaN(Number(pondId))) {\n      return fail(400, { error: \"Invalid Pond ID for report deletion.\" });\n    }\n    const data = await request.formData();\n    const id = data.get(\"id\")?.toString();\n    if (!id) {\n      return fail(400, { error: \"Report ID is required.\" });\n    }\n    try {\n      const transaction = db.transaction(() => {\n        const old = db.prepare(\"SELECT species_name FROM production_reports WHERE id = ?\").get(id);\n        db.prepare(\n          \"DELETE FROM production_reports WHERE id = ? AND pond_id = ?\"\n        ).run(id, Number(pondId));\n        const userId = locals.user?.id || null;\n        logActivity(\n          \"deleted\",\n          \"production_report\",\n          Number(id),\n          `Deleted production report ID ${id} for pond ID ${pondId} (Species: ${old?.species_name ?? \"Unknown\"})`,\n          userId\n        );\n        return { success: true };\n      });\n      return transaction();\n    } catch (error2) {\n      console.error(\"Error deleting production report:\", error2);\n      return fail(500, { error: \"Failed to delete production report.\" });\n    }\n  }\n};\nexport {\n  actions,\n  load\n};\n","import * as server from '../entries/pages/dashboard/ponds/_pondId_/_page.server.ts.js';\n\nexport const index = 15;\nlet component_cache;\nexport const component = async () => component_cache ??= (await import('../entries/pages/dashboard/ponds/_pondId_/_page.svelte.js')).default;\nexport { server };\nexport const server_id = \"src/routes/dashboard/ponds/[pondId]/+page.server.ts\";\nexport const imports = [\"_app/immutable/nodes/15.BLR9u2OZ.js\",\"_app/immutable/chunks/CY4Ce0c4.js\",\"_app/immutable/chunks/BdQXYw_T.js\",\"_app/immutable/chunks/BO5sSAji.js\",\"_app/immutable/chunks/DAK0Aekt.js\",\"_app/immutable/chunks/D9hGQICX.js\",\"_app/immutable/chunks/DsUCSRu3.js\",\"_app/immutable/chunks/B7wWqVz8.js\",\"_app/immutable/chunks/D8SxGvop.js\",\"_app/immutable/chunks/Bex-ZZ3I.js\",\"_app/immutable/chunks/1fwwRmkB.js\",\"_app/immutable/chunks/BZ9DdiR_.js\",\"_app/immutable/chunks/B3kFzWm3.js\",\"_app/immutable/chunks/MTanKdmA.js\",\"_app/immutable/chunks/BDEhTM1z.js\",\"_app/immutable/chunks/79yj6mvb.js\",\"_app/immutable/chunks/C8nz08U9.js\",\"_app/immutable/chunks/BXiYU_fU.js\",\"_app/immutable/chunks/DYevSITT.js\",\"_app/immutable/chunks/BnoYQOO4.js\",\"_app/immutable/chunks/DG-I9f0P.js\",\"_app/immutable/chunks/BCMyTCEX.js\",\"_app/immutable/chunks/B_4Zpmki.js\",\"_app/immutable/chunks/BOqc4mWw.js\",\"_app/immutable/chunks/FbqajOR9.js\",\"_app/immutable/chunks/UFUhM6vw.js\",\"_app/immutable/chunks/6xhieDVM.js\",\"_app/immutable/chunks/CsJL26Fh.js\",\"_app/immutable/chunks/CVjO-GJU.js\",\"_app/immutable/chunks/DIvwaDiU.js\",\"_app/immutable/chunks/CEVutZxn.js\",\"_app/immutable/chunks/CPRTWbuQ.js\",\"_app/immutable/chunks/BZzk2vwh.js\",\"_app/immutable/chunks/_cz2kCqa.js\",\"_app/immutable/chunks/0urWu8Wf.js\",\"_app/immutable/chunks/CPLOLVSj.js\",\"_app/immutable/chunks/eT-nG_na.js\",\"_app/immutable/chunks/CfmL5u39.js\",\"_app/immutable/chunks/CTGOP75E.js\",\"_app/immutable/chunks/DgoSFWl1.js\",\"_app/immutable/chunks/CjnbRfgs.js\",\"_app/immutable/chunks/D_UmtYL2.js\"];\nexport const stylesheets = [];\nexport const fonts = [];\n"],"names":[],"mappings":"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"}